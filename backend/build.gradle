plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'org.sejongisc'
version = '0.0.1-SNAPSHOT'
description = 'Backend for Sejong Investment Scholars Club (SISC)'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

jacoco {
	toolVersion = "0.8.12"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy tasks.jacocoTestReport   // 리포트는 테스트 후
}
//리포트 생성 명령어
tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

/** ① 테스트 클래스가 1개도 없으면 실패 */
def TEST_CLASS_PATTERNS = ['**/*Test.class','**/*Tests.class','**/*Spec.class']
// 필요 시 통합테스트 네이밍도 추가: '**/*IT.class'

tasks.register('enforceTestsPresent') {
	group = 'verification'
	description = 'Fail build if no compiled test classes are present'
	dependsOn tasks.named('testClasses')  // 먼저 testClasses 실행(없으면 NO-SOURCE라도 OK)

	doLast {
		// java/kotlin/groovy 모든 테스트 출력 디렉토리에서 .class를 찾음
		def dirs = sourceSets.test.output.classesDirs.files.findAll { it.exists() }
		def found = dirs.any { !fileTree(it).matching { include TEST_CLASS_PATTERNS }.isEmpty() }

		if (!found) {
			throw new GradleException("No test classes found. CI requires at least one test.")
		}
	}
}

/** ② JaCoCo 실행 데이터가 없으면 실패 */
tasks.register('enforceCoverageData') {
	group = 'verification'
	description = 'Fail build if no JaCoCo execution data was produced'
	dependsOn tasks.named('test')  // test를 먼저 시도

	doLast {
		// JaCoCo 실행 데이터(.exec/.ec) 존재 확인 (Gradle JaCoCo 기본 위치: build/jacoco)
		def execs = fileTree("$buildDir/jacoco").matching { include '**/*.exec', '**/*.ec' }.files
		if (execs.isEmpty()) {
			throw new GradleException("No JaCoCo execution data found. Ensure tests actually ran.")
		}
	}
}

/** ③ 커버리지 게이트(70%) — 전체 번들 기준(필요 시 클래스/패키지 룰 추가 가능) */
tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test
	violationRules {
//		rule {
//			element = 'BUNDLE'
//			limit {
//				counter = 'INSTRUCTION'
//				value   = 'COVEREDRATIO'
//				minimum = 0.70
//			}
//		}
//		 예) 특정 컨트롤러도 강제하려면 FQN 정확히:
		rule {
			element = 'CLASS'
			includes = ['com.example.trader.service.UserService']
			limit {
				counter = 'INSTRUCTION'
				value   = 'COVEREDRATIO'
				minimum = 0.50
			}
		}
	}
}

/** ④ check에 “강제 검사 + 커버리지 게이트”를 확실히 연결 */
tasks.named('check') {
	dependsOn 'enforceTestsPresent'
	dependsOn 'enforceCoverageData'
	dependsOn 'jacocoTestCoverageVerification'
}
tasks.register('printTestClasses') {
	dependsOn tasks.named('testClasses')
	doLast {
		def tree = sourceSets.test.output.classesDirs.asFileTree.matching { include '**/*.class' }
		println "== Compiled test classes =="
		tree.files.each { println it }
	}
}
/** (보험) build가 check를 반드시 타도록 — 기본이긴 하지만 명시해둬도 무방 */
tasks.named('build') {
	dependsOn 'check'
}
check.dependsOn jacocoTestCoverageVerification // ✅ 빌드/체크 시 커버리지 게이트 적용

tasks.named('test') {
	useJUnitPlatform()
}
