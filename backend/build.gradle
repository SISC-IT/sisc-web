plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'org.sejongisc'
version = '0.0.1-SNAPSHOT'
description = 'Backend for Sejong Investment Scholars Club (SISC)'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// spring-retry
	implementation 'org.springframework.retry:spring-retry'

	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// backtesting library
	implementation 'org.ta4j:ta4j-core:0.15'
}

jacoco {
	toolVersion = "0.8.12"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy tasks.jacocoTestReport   // 리포트는 테스트 후
	ignoreFailures = false
}
def JACOCO_EXCLUDES = [
		'**/*Application*', '**/*Config*',
		'**/*Dto*', '**/*Request*', '**/*Response*',
		'**/*Exception*', '**/*Error*',
		'**/*Q*', '**/generated/**'
]
//리포트 생성 명령어
tasks.jacocoTestReport {
	dependsOn tasks.test

	// 실행 데이터(.exec/.ec) 수집 경로를 명시적으로 지정 (서브모듈/CI에도 견고)
	executionData fileTree(dir: "$buildDir", includes: [
			"jacoco/*.exec", "jacoco/*.ec",
			"outputs/unit_test_code_coverage/*/*.ec"
	])
	// ✅ 설정 시점에 classDirectories 지정
	classDirectories.setFrom(
			files(sourceSets.main.output).asFileTree.matching {
				exclude JACOCO_EXCLUDES
			}
	)


	reports {
		xml.required.set(true)   // CI용 (Sonar/Codecov 등)
		html.required.set(true)  // 사람이 보기 좋음
	}
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.jacocoTestReport
	// ✅ 설정 시점에 classDirectories 지정
	classDirectories.setFrom(
			files(sourceSets.main.output).asFileTree.matching {
				exclude JACOCO_EXCLUDES
			}
	)
	violationRules {
		rule {
			element = 'BUNDLE'
			limit {
				counter = 'INSTRUCTION'
				value   = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}


}

// check 시 필수로 실행되게
tasks.named('check') {
	dependsOn tasks.jacocoTestCoverageVerification
}
tasks.register('printTestClasses') {
	dependsOn tasks.named('testClasses')
	doLast {
		def tree = sourceSets.test.output.classesDirs.asFileTree.matching { include '**/*.class' }
		println "== Compiled test classes =="
		tree.files.each { println it }
	}
}
